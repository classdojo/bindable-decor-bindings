// Generated by CoffeeScript 1.7.0
(function() {
  var BindingsDecorator, disposable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  disposable = require("disposable");

  BindingsDecorator = (function() {

    /*
     */
    function BindingsDecorator(target, options) {
      this.target = target;
      this.dispose = __bind(this.dispose, this);
      this._onVisibilityChange = __bind(this._onVisibilityChange, this);
      this.bind = __bind(this.bind, this);
      this.bindings = typeof options === "object" ? options : void 0;
      this._disposable = disposable.create();
      this.target.once("dispose", this.dispose);
      this.target.on("change:visible", this._onVisibilityChange);
    }


    /*
     */

    BindingsDecorator.prototype.bind = function() {
      this.dispose();
      if (this.bindings) {
        return this._setupExplicitBindings();
      }
    };


    /*
     */

    BindingsDecorator.prototype._onVisibilityChange = function(value) {
      if (value) {
        return this.bind();
      } else {
        return this.dispose();
      }
    };


    /*
     */

    BindingsDecorator.prototype.dispose = function() {
      return this._disposable.dispose();
    };


    /*
     explicit bindings are properties from & to properties of the view controller
     */

    BindingsDecorator.prototype._setupExplicitBindings = function() {
      var bindings, key, _results;
      bindings = this.bindings;
      _results = [];
      for (key in bindings) {
        _results.push(this._setupBinding(key, bindings[key]));
      }
      return _results;
    };


    /*
     */

    BindingsDecorator.prototype._setupBinding = function(property, to) {
      var oldTo, options;
      options = {};
      if (typeof to === "function") {
        oldTo = to;
        to = (function(_this) {
          return function() {
            return oldTo.apply(_this.target, arguments);
          };
        })(this);
      }
      if (to.to) {
        options = to;
      } else {
        options = {
          to: to
        };
      }
      return this._disposable.add(this.target.bind(property, options).now());
    };

    return BindingsDecorator;

  })();

  module.exports = function(event) {
    return {
      priority: "load",
      getOptions: function(target) {
        return target.bindings;
      },
      decorate: function(target, options) {
        var decor;
        decor = new BindingsDecorator(target, options);
        if (event) {
          return target.once(event, decor.bind);
        } else {
          return decor.bind();
        }
      }
    };
  };

}).call(this);
